/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "ITier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITier__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC2981Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981Upgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Burnable__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "EmissionsERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmissionsERC20__factory>;
    getContractFactory(
      name: "EmissionsERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmissionsERC20Factory__factory>;
    getContractFactory(
      name: "IClaim",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaim__factory>;
    getContractFactory(
      name: "Cooldown",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cooldown__factory>;
    getContractFactory(
      name: "ERC20Redeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Redeem__factory>;
    getContractFactory(
      name: "RedeemableERC20ClaimEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20ClaimEscrow__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "NoticeBoard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoticeBoard__factory>;
    getContractFactory(
      name: "Phased",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Phased__factory>;
    getContractFactory(
      name: "GatedNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatedNFT__factory>;
    getContractFactory(
      name: "GatedNFTFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatedNFTFactory__factory>;
    getContractFactory(
      name: "RedeemableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20__factory>;
    getContractFactory(
      name: "RedeemableERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Factory__factory>;
    getContractFactory(
      name: "ISale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISale__factory>;
    getContractFactory(
      name: "Sale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sale__factory>;
    getContractFactory(
      name: "SaleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleFactory__factory>;
    getContractFactory(
      name: "SSTORE2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSTORE2__factory>;
    getContractFactory(
      name: "Bytecode",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bytecode__factory>;
    getContractFactory(
      name: "CalculatorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalculatorTest__factory>;
    getContractFactory(
      name: "ERC20PulleeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PulleeTest__factory>;
    getContractFactory(
      name: "FixedPointMathOpsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPointMathOpsTest__factory>;
    getContractFactory(
      name: "MockISale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockISale__factory>;
    getContractFactory(
      name: "LogicOpsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LogicOpsTest__factory>;
    getContractFactory(
      name: "TierOpsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierOpsTest__factory>;
    getContractFactory(
      name: "TokenOpsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenOpsTest__factory>;
    getContractFactory(
      name: "PhasedScheduleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PhasedScheduleTest__factory>;
    getContractFactory(
      name: "PhasedTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PhasedTest__factory>;
    getContractFactory(
      name: "RedeemableERC20Reentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Reentrant__factory>;
    getContractFactory(
      name: "ReserveNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveNFT__factory>;
    getContractFactory(
      name: "ReserveToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveToken__factory>;
    getContractFactory(
      name: "ReserveTokenERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenERC1155__factory>;
    getContractFactory(
      name: "ReserveTokenERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenERC721__factory>;
    getContractFactory(
      name: "ReserveTokenTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenTest__factory>;
    getContractFactory(
      name: "SaleReentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleReentrant__factory>;
    getContractFactory(
      name: "SaturatingMathTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaturatingMathTest__factory>;
    getContractFactory(
      name: "VerifyCallbackTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyCallbackTest__factory>;
    getContractFactory(
      name: "RedeemableERC20ClaimEscrowWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20ClaimEscrowWrapper__factory>;
    getContractFactory(
      name: "SaleEscrowWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleEscrowWrapper__factory>;
    getContractFactory(
      name: "TierReportTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierReportTest__factory>;
    getContractFactory(
      name: "ValueTierTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValueTierTest__factory>;
    getContractFactory(
      name: "CombineTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CombineTier__factory>;
    getContractFactory(
      name: "CombineTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CombineTierFactory__factory>;
    getContractFactory(
      name: "ERC20BalanceTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BalanceTier__factory>;
    getContractFactory(
      name: "ERC20BalanceTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BalanceTierFactory__factory>;
    getContractFactory(
      name: "ERC20TransferTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20TransferTier__factory>;
    getContractFactory(
      name: "ERC20TransferTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20TransferTierFactory__factory>;
    getContractFactory(
      name: "ERC721BalanceTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BalanceTier__factory>;
    getContractFactory(
      name: "ERC721BalanceTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BalanceTierFactory__factory>;
    getContractFactory(
      name: "ITier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITier__factory>;
    getContractFactory(
      name: "ReadOnlyTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReadOnlyTier__factory>;
    getContractFactory(
      name: "ReadWriteTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReadWriteTier__factory>;
    getContractFactory(
      name: "ValueTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValueTier__factory>;
    getContractFactory(
      name: "VerifyTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyTier__factory>;
    getContractFactory(
      name: "VerifyTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyTierFactory__factory>;
    getContractFactory(
      name: "IVerifyCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifyCallback__factory>;
    getContractFactory(
      name: "Verify",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verify__factory>;
    getContractFactory(
      name: "VerifyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyFactory__factory>;
    getContractFactory(
      name: "VMState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VMState__factory>;

    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "ITier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITier>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC2981Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981Upgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Burnable>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "EmissionsERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmissionsERC20>;
    getContractAt(
      name: "EmissionsERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmissionsERC20Factory>;
    getContractAt(
      name: "IClaim",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaim>;
    getContractAt(
      name: "Cooldown",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cooldown>;
    getContractAt(
      name: "ERC20Redeem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Redeem>;
    getContractAt(
      name: "RedeemableERC20ClaimEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20ClaimEscrow>;
    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "NoticeBoard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoticeBoard>;
    getContractAt(
      name: "Phased",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Phased>;
    getContractAt(
      name: "GatedNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatedNFT>;
    getContractAt(
      name: "GatedNFTFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatedNFTFactory>;
    getContractAt(
      name: "RedeemableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20>;
    getContractAt(
      name: "RedeemableERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Factory>;
    getContractAt(
      name: "ISale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISale>;
    getContractAt(
      name: "Sale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sale>;
    getContractAt(
      name: "SaleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleFactory>;
    getContractAt(
      name: "SSTORE2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SSTORE2>;
    getContractAt(
      name: "Bytecode",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bytecode>;
    getContractAt(
      name: "CalculatorTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CalculatorTest>;
    getContractAt(
      name: "ERC20PulleeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PulleeTest>;
    getContractAt(
      name: "FixedPointMathOpsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPointMathOpsTest>;
    getContractAt(
      name: "MockISale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockISale>;
    getContractAt(
      name: "LogicOpsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LogicOpsTest>;
    getContractAt(
      name: "TierOpsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierOpsTest>;
    getContractAt(
      name: "TokenOpsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenOpsTest>;
    getContractAt(
      name: "PhasedScheduleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PhasedScheduleTest>;
    getContractAt(
      name: "PhasedTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PhasedTest>;
    getContractAt(
      name: "RedeemableERC20Reentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Reentrant>;
    getContractAt(
      name: "ReserveNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveNFT>;
    getContractAt(
      name: "ReserveToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveToken>;
    getContractAt(
      name: "ReserveTokenERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenERC1155>;
    getContractAt(
      name: "ReserveTokenERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenERC721>;
    getContractAt(
      name: "ReserveTokenTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenTest>;
    getContractAt(
      name: "SaleReentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleReentrant>;
    getContractAt(
      name: "SaturatingMathTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaturatingMathTest>;
    getContractAt(
      name: "VerifyCallbackTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyCallbackTest>;
    getContractAt(
      name: "RedeemableERC20ClaimEscrowWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20ClaimEscrowWrapper>;
    getContractAt(
      name: "SaleEscrowWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleEscrowWrapper>;
    getContractAt(
      name: "TierReportTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierReportTest>;
    getContractAt(
      name: "ValueTierTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValueTierTest>;
    getContractAt(
      name: "CombineTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CombineTier>;
    getContractAt(
      name: "CombineTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CombineTierFactory>;
    getContractAt(
      name: "ERC20BalanceTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BalanceTier>;
    getContractAt(
      name: "ERC20BalanceTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BalanceTierFactory>;
    getContractAt(
      name: "ERC20TransferTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20TransferTier>;
    getContractAt(
      name: "ERC20TransferTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20TransferTierFactory>;
    getContractAt(
      name: "ERC721BalanceTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BalanceTier>;
    getContractAt(
      name: "ERC721BalanceTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BalanceTierFactory>;
    getContractAt(
      name: "ITier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITier>;
    getContractAt(
      name: "ReadOnlyTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReadOnlyTier>;
    getContractAt(
      name: "ReadWriteTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReadWriteTier>;
    getContractAt(
      name: "ValueTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValueTier>;
    getContractAt(
      name: "VerifyTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyTier>;
    getContractAt(
      name: "VerifyTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyTierFactory>;
    getContractAt(
      name: "IVerifyCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifyCallback>;
    getContractAt(
      name: "Verify",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verify>;
    getContractAt(
      name: "VerifyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyFactory>;
    getContractAt(
      name: "VMState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VMState>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
