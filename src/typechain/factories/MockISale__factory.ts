/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockISale, MockISaleInterface } from "../MockISale";

const _abi = [
  {
    inputs: [],
    name: "_reserve",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_saleStatus",
    outputs: [
      {
        internalType: "enum SaleStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserve",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "saleStatus",
    outputs: [
      {
        internalType: "enum SaleStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "reserve_",
        type: "address",
      },
    ],
    name: "setReserve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum SaleStatus",
        name: "saleStatus_",
        type: "uint8",
      },
    ],
    name: "setSaleStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    name: "setToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063cd3293de11610076578063ecd0c0c31161005b578063ecd0c0c314610201578063f9020e3314610221578063fc0c546a1461024457600080fd5b8063cd3293de146101b1578063cf520024146101cf57600080fd5b8063144fa6d7146100a8578063413ab4a8146100ff5780634891ad88146101495780639cecc80a1461015c575b600080fd5b6100fd6100b63660046102bb565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b60005461011f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fd6101573660046102f8565b610262565b6100fd61016a3660046102bb565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1661011f565b6000546101f49074010000000000000000000000000000000000000000900460ff1681565b6040516101409190610348565b60015461011f9073ffffffffffffffffffffffffffffffffffffffff1681565b60005474010000000000000000000000000000000000000000900460ff166101f4565b60015473ffffffffffffffffffffffffffffffffffffffff1661011f565b600080548291907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008360038111156102b3576102b3610319565b021790555050565b6000602082840312156102cd57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102f157600080fd5b9392505050565b60006020828403121561030a57600080fd5b8135600481106102f157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160048310610383577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9190529056fea264697066735822122064fdb16525eb53256ebac1a3faad78d703870e2fa5d6be068930f59e7498147264736f6c634300080a0033";

type MockISaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockISaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockISale__factory extends ContractFactory {
  constructor(...args: MockISaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockISale> {
    return super.deploy(overrides || {}) as Promise<MockISale>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockISale {
    return super.attach(address) as MockISale;
  }
  connect(signer: Signer): MockISale__factory {
    return super.connect(signer) as MockISale__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockISaleInterface {
    return new utils.Interface(_abi) as MockISaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockISale {
    return new Contract(address, _abi, signerOrProvider) as MockISale;
  }
}
