/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Phased, PhasedInterface } from "../Phased";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPhase",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "scheduledBlock",
        type: "uint256",
      },
    ],
    name: "PhaseScheduled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "uint256",
        name: "phase_",
        type: "uint256",
      },
    ],
    name: "blockNumberForPhase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPhase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "uint256",
        name: "blockNumber_",
        type: "uint256",
      },
    ],
    name: "phaseAtBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "phaseBlocks",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103b8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063055ad42e14610051578063634991af1461006c5780639923c94b1461007f578063b8ffd02c146100a7575b600080fd5b6100596100ba565b6040519081526020015b60405180910390f35b61005961007a366004610231565b610124565b61009261008d3660046102bb565b61017a565b60405163ffffffff9091168152602001610063565b6100596100b5366004610231565b6101aa565b6040805161010081019182905260009161011f919083906008908280855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116100d8579050505050505043610124565b905090565b6000805b600881101561016e57838160088110610143576101436102d4565b602002015163ffffffff1683101561015c579050610174565b8061016681610332565b915050610128565b50600890505b92915050565b6000816008811061018a57600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b60008082116101ba5760006101dc565b826101c660018461036b565b600881106101d6576101d66102d4565b60200201515b63ffffffff169392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803563ffffffff8116811461022c57600080fd5b919050565b600080610120838503121561024557600080fd5b83601f84011261025457600080fd5b60405161010080820182811067ffffffffffffffff82111715610279576102796101e9565b6040528401818682111561028c57600080fd5b855b828110156102ad5761029f81610218565b82526020918201910161028e565b509196903595509350505050565b6000602082840312156102cd57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561036457610364610303565b5060010190565b60008282101561037d5761037d610303565b50039056fea2646970667358221220e5cc2f041a420ad353bd7556db7de59a30221f7c31381b6db0486534bc90645764736f6c634300080a0033";

type PhasedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PhasedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Phased__factory extends ContractFactory {
  constructor(...args: PhasedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Phased> {
    return super.deploy(overrides || {}) as Promise<Phased>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Phased {
    return super.attach(address) as Phased;
  }
  connect(signer: Signer): Phased__factory {
    return super.connect(signer) as Phased__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PhasedInterface {
    return new utils.Interface(_abi) as PhasedInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Phased {
    return new Contract(address, _abi, signerOrProvider) as Phased;
  }
}
