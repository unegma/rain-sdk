/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PhasedTest, PhasedTestInterface } from "../PhasedTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPhase",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "scheduledBlock",
        type: "uint256",
      },
    ],
    name: "PhaseScheduled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "uint256",
        name: "phase_",
        type: "uint256",
      },
    ],
    name: "blockNumberForPhase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "condition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPhase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[8]",
        name: "phaseBlocks_",
        type: "uint32[8]",
      },
      {
        internalType: "uint256",
        name: "blockNumber_",
        type: "uint256",
      },
    ],
    name: "phaseAtBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "phaseBlocks",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "phase_",
        type: "uint256",
      },
    ],
    name: "runsOnlyAtLeastPhase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "phase_",
        type: "uint256",
      },
    ],
    name: "runsOnlyPhase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "phaseBlock_",
        type: "uint256",
      },
    ],
    name: "testScheduleNextPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805460ff19168117905534801561001c57600080fd5b5061002561002a565b6101a0565b600054600163ffffffff909116106100445761004461018a565b604080516101008101825263ffffffff80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915261009560008260086100d9565b50604080513381526000602082018190528183015290517fba85f6676f17ca992195e3cb204ae48c68666b109edc14a794e5d894387d25d39181900360600190a150565b6001830191839082156101655791602002820160005b8382111561013357835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026100ef565b80156101635782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610133565b505b50610171929150610175565b5090565b5b808211156101715760008155600101610176565b634e487b7160e01b600052600160045260246000fd5b6108dd806101af6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80639923c94b11610076578063c50313311161005b578063c50313311461016b578063dab4b15114610178578063e48d8f721461018b57600080fd5b80639923c94b14610130578063b8ffd02c1461015857600080fd5b8063055ad42e146100a85780632b4eaffc146100c3578063634991af146100e657806394c2a686146100f9575b600080fd5b6100b061019e565b6040519081526020015b60405180910390f35b6100d66100d13660046106f6565b610208565b60405190151581526020016100ba565b6100b06100f4366004610757565b61028a565b61012e600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b005b61014361013e3660046106f6565b6102e0565b60405163ffffffff90911681526020016100ba565b6100b0610166366004610757565b610310565b6001546100d69060ff1681565b6100d66101863660046106f6565b61034f565b61012e6101993660046106f6565b6103c2565b60408051610100810191829052600091610203919083906008908280855b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116101bc57905050505050504361028a565b905090565b6000818061021461019e565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4d494e5f5048415345000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b50600192915050565b6000805b60088110156102d4578381600881106102a9576102a96107e1565b602002015163ffffffff168310156102c25790506102da565b806102cc8161083f565b91505061028e565b50600890505b92915050565b600081600881106102f057600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b6000808211610320576000610342565b8261032c600184610878565b6008811061033c5761033c6107e1565b60200201515b63ffffffff169392505050565b6000818061035b61019e565b14610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4241445f504841534500000000000000000000000000000000000000000000006044820152606401610278565b60015460ff1661042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f434f4e444954494f4e00000000000000000000000000000000000000000000006044820152606401610278565b61044a61043961019e565b61044490600161088f565b8261044d565b50565b804311156104b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e4558545f424c4f434b5f5041535400000000000000000000000000000000006044820152606401610278565b63ffffffff8110610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4558545f424c4f434b5f554e494e495449414c495a454400000000000000006044820152606401610278565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82018061055061019e565b146105b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4558545f5048415345000000000000000000000000000000000000000000006044820152606401610278565b600081600881106105ca576105ca6107e1565b60088104919091015460079091166004026101000a900463ffffffff90811614610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4558545f424c4f434b5f5345540000000000000000000000000000000000006044820152606401610278565b8160008260088110610664576106646107e1565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055507fba85f6676f17ca992195e3cb204ae48c68666b109edc14a794e5d894387d25d33384846040516106e99392919073ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b60405180910390a1505050565b60006020828403121561070857600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803563ffffffff8116811461075257600080fd5b919050565b600080610120838503121561076b57600080fd5b83601f84011261077a57600080fd5b60405161010080820182811067ffffffffffffffff8211171561079f5761079f61070f565b604052840181868211156107b257600080fd5b855b828110156107d3576107c58161073e565b8252602091820191016107b4565b509196903595509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561087157610871610810565b5060010190565b60008282101561088a5761088a610810565b500390565b600082198211156108a2576108a2610810565b50019056fea264697066735822122043a9a2bf1b25076966c7a1e4b8b128730f10cb49c912c82088895859c954c87264736f6c634300080a0033";

type PhasedTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PhasedTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PhasedTest__factory extends ContractFactory {
  constructor(...args: PhasedTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PhasedTest> {
    return super.deploy(overrides || {}) as Promise<PhasedTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PhasedTest {
    return super.attach(address) as PhasedTest;
  }
  connect(signer: Signer): PhasedTest__factory {
    return super.connect(signer) as PhasedTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PhasedTestInterface {
    return new utils.Interface(_abi) as PhasedTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PhasedTest {
    return new Contract(address, _abi, signerOrProvider) as PhasedTest;
  }
}
