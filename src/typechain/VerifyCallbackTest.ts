/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type EvidenceStruct = { account: string; data: BytesLike };

export type EvidenceStructOutput = [string, string] & {
  account: string;
  data: string;
};

export interface VerifyCallbackTestInterface extends utils.Interface {
  functions: {
    "additions(address)": FunctionFragment;
    "afterAdd(address,(address,bytes))": FunctionFragment;
    "afterApprove(address,(address,bytes)[])": FunctionFragment;
    "afterBan(address,(address,bytes)[])": FunctionFragment;
    "afterRemove(address,(address,bytes)[])": FunctionFragment;
    "approvals(address)": FunctionFragment;
    "bans(address)": FunctionFragment;
    "removals(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "additions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "afterAdd",
    values: [string, EvidenceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterApprove",
    values: [string, EvidenceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterBan",
    values: [string, EvidenceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemove",
    values: [string, EvidenceStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "approvals", values: [string]): string;
  encodeFunctionData(functionFragment: "bans", values: [string]): string;
  encodeFunctionData(functionFragment: "removals", values: [string]): string;

  decodeFunctionResult(functionFragment: "additions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterBan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removals", data: BytesLike): Result;

  events: {};
}

export interface VerifyCallbackTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifyCallbackTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    additions(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    afterAdd(
      adder_: string,
      evidence_: EvidenceStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterApprove(
      approver_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterBan(
      banner_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterRemove(
      remover_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvals(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    bans(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removals(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  additions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  afterAdd(
    adder_: string,
    evidence_: EvidenceStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterApprove(
    approver_: string,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterBan(
    banner_: string,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterRemove(
    remover_: string,
    evidences_: EvidenceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  bans(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    additions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    afterAdd(
      adder_: string,
      evidence_: EvidenceStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterApprove(
      approver_: string,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterBan(
      banner_: string,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterRemove(
      remover_: string,
      evidences_: EvidenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approvals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    bans(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removals(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    additions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    afterAdd(
      adder_: string,
      evidence_: EvidenceStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterApprove(
      approver_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterBan(
      banner_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterRemove(
      remover_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    additions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    afterAdd(
      adder_: string,
      evidence_: EvidenceStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterApprove(
      approver_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterBan(
      banner_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterRemove(
      remover_: string,
      evidences_: EvidenceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
